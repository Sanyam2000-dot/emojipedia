{"version":3,"sources":["logo.svg","components/emojidict.js","components/input.js","App.js","reportWebVitals.js","index.js"],"names":["emojidictionary","Input","useState","user","setUser","dbEmoji","Object","keys","className","onChange","event","InputValue","target","value","map","emoji","index","onClick","emojiClickHandler","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAAe,I,YCwBAA,G,MAxBO,CAClB,eAAM,gBACN,eAAM,8BACN,eAAM,kCACN,eAAM,iCACN,eAAM,0BACN,eAAM,2BACN,eAAM,gCACN,eAAM,yBACN,eAAM,wBACN,eAAM,mBACN,eAAM,eACN,eAAM,iCACN,eAAM,yBACN,gBAAO,2BACP,gBAAO,+BACP,gBAAO,cACP,gBAAO,sBACP,gBAAO,eACP,eAAM,gCACN,eAAM,iCACN,eAAM,gB,OCjBK,SAASC,IAAS,IAAD,EACNC,mBAAS,IADH,mBACvBC,EADuB,KACjBC,EADiB,KAE1BC,EAAUC,OAAOC,KAAKP,GAU1B,OACE,gCACE,4CACA,uBAAOQ,UAAU,YAAYC,SAZjC,SAAsBC,GACpB,IAAIC,EAAaD,EAAME,OAAOC,MAE9BT,EADcJ,EAAgBW,OAW5B,6BAAKR,IACL,qBAAKK,UAAU,WAAf,SACGH,EAAQS,KAAI,SAACC,EAAOC,GACnB,OACE,sBAAMR,UAAU,QAAQS,QAAS,kBAZ3C,SAA2BF,GAEzBX,EADcJ,EAAgBe,IAWiBG,CAAkBH,IAAzD,SACGA,YCjBAI,MAJf,WACE,OAAO,cAAC,EAAD,KCOMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bc769d59.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","var emojidictionary = {\r\n    \"üòÄ\": \"Grinning Face\",\r\n    \"üòÉ\": \"Grinning Face with Big Eyes\",\r\n    \"üòÑ\": \"Grinning Face with Smiling Eyes\",\r\n    \"üòÅ\": \"Beaming Face with Smiling Eyes\",\r\n    \"üòÜ\": \"Grinning Squinting Face\",\r\n    \"üòÖ\": \"Grinning Face with Sweat\",\r\n    \"ü§£\": \"Rolling on the Floor Laughing\",\r\n    \"üòÇ\": \"Face with Tears of Joy\",\r\n    \"üôÇ\": \"Slightly Smiling Face\",\r\n    \"üôÉ\": \"Upside-Down Face\",\r\n    \"üòâ\": \"Winking Face\",\r\n    \"üòä\": \"Smiling Face with Smiling Eyes\",\r\n    \"üòá\": \"Smiling Face with Halo\",\r\n    \"ü•∞ \": \"Smiling Face with Hearts\",\r\n    \"üòç \": \"Smiling Face with Heart-Eyes\",\r\n    \"ü§© \": \"Star-Struck\",\r\n    \"üòò \": \"Face Blowing a Kiss\",\r\n    \"üòó \": \"Kissing Face\",\r\n    \"üòö\": \"Kissing Face with Closed Eyes\",\r\n    \"üòô\": \"Kissing Face with Smiling Eyes\",\r\n    \"üòí\": \"What yaar..\",\r\n};\r\n\r\nexport default emojidictionary;","import React, { useState } from \"react\";\r\nimport \"../components/Input.css\";\r\nimport emojidictionary from \"../components/emojidict.js\";\r\n\r\nexport default function Input() {\r\n  const [user, setUser] = useState(\"\");\r\n  var dbEmoji = Object.keys(emojidictionary);\r\n  function inputHandler(event) {\r\n    var InputValue = event.target.value;\r\n    var meaning = emojidictionary[InputValue];\r\n    setUser(meaning);\r\n  }\r\n  function emojiClickHandler(emoji) {\r\n    var meaning = emojidictionary[emoji];\r\n    setUser(meaning);\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>EMOJIPEDIA</h1>\r\n      <input className=\"InputArea\" onChange={inputHandler}></input>\r\n      <h2>{user}</h2>\r\n      <div className=\"EmojiDiv\">\r\n        {dbEmoji.map((emoji, index) => {\r\n          return (\r\n            <span className=\"Emoji\" onClick={() => emojiClickHandler(emoji)}>\r\n              {emoji}\r\n            </span>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Input from \"./components/input\";\n\nfunction App() {\n  return <Input />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}